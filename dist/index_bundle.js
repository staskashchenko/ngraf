/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Events.ts":
/*!***********************!*\
  !*** ./src/Events.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Events\": () => (/* binding */ Events)\n/* harmony export */ });\nclass Events {\r\n    constructor() {\r\n        this.subEvents = new Map();\r\n    }\r\n    dispatch(eventType, eventResult) {\r\n        let functions = this.subEvents.get(eventType) || [];\r\n        for (let i = 0; i < functions.length; i++) {\r\n            functions[i](eventResult);\r\n        }\r\n    }\r\n    on(eventType, eventFunc) {\r\n        if (this.subEvents.has(eventType) == false) {\r\n            this.subEvents.set(eventType, [eventFunc]);\r\n        }\r\n        else {\r\n            let functions = this.subEvents.get(eventType) || [];\r\n            functions.push(eventFunc);\r\n            this.subEvents.set(eventType, functions);\r\n        }\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://ngraf/./src/Events.ts?");

/***/ }),

/***/ "./src/MyPoint.ts":
/*!************************!*\
  !*** ./src/MyPoint.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MyPoint\": () => (/* binding */ MyPoint)\n/* harmony export */ });\nclass MyPoint {\r\n    constructor(params) {\r\n        this.date = params.date || new Date(); //times\r\n        this.value = params.value || 0; //values\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://ngraf/./src/MyPoint.ts?");

/***/ }),

/***/ "./src/MyTimer.ts":
/*!************************!*\
  !*** ./src/MyTimer.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MyTimer\": () => (/* binding */ MyTimer)\n/* harmony export */ });\nclass MyTimer {\r\n    constructor(params) {\r\n        this.func = params.func; //function\r\n        this.delay = params.delay || 1; //delay\r\n        this.launchTime = (new Date()).getTime() + this.delay; //function launch time\r\n        this.isActiv = true; //is timer activ\r\n    }\r\n    _timer() {\r\n        if (this.isActiv == true) {\r\n            let now = (new Date()).getTime();\r\n            if (this.launchTime <= now && (this.delay != 0)) {\r\n                this.func();\r\n                this.launchTime = now + this.delay;\r\n            }\r\n            requestAnimationFrame(() => {\r\n                this._timer();\r\n            });\r\n        }\r\n    }\r\n    launch() {\r\n        this._timer();\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://ngraf/./src/MyTimer.ts?");

/***/ }),

/***/ "./src/PlotterModel.ts":
/*!*****************************!*\
  !*** ./src/PlotterModel.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PlotterModel\": () => (/* binding */ PlotterModel)\n/* harmony export */ });\nclass PlotterModel {\r\n    constructor(params) {\r\n        this.name = params.name || \"\";\r\n        this.points = params.points || new Array(); //model points\r\n        this._socket = params.socket;\r\n        this._socket.events.on(\"receive\", this._onReceive.bind(this));\r\n    }\r\n    _onReceive(poi) {\r\n        this.points.push(poi);\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://ngraf/./src/PlotterModel.ts?");

/***/ }),

/***/ "./src/PlotterView.ts":
/*!****************************!*\
  !*** ./src/PlotterView.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PlotterView\": () => (/* binding */ PlotterView)\n/* harmony export */ });\n/* harmony import */ var _MyTimer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MyTimer */ \"./src/MyTimer.ts\");\n\r\nclass PlotterView {\r\n    constructor(params) {\r\n        // @ts-ignore\r\n        this._container = document.getElementById(params.container);\r\n        this.model = params.model;\r\n        this.oPointsLength = this.model.points.length;\r\n        this.baseGridPoint = null;\r\n        this.gridStep = 1000; //grid step in milliseconds\r\n        this.leftPressed = false;\r\n        this.rightPressed = false;\r\n        this.T = 5000; //period between t0 & t1\r\n        this.dt = 5; //period between frames\r\n        this.olddt = this.dt; //old dt (need 4 key animation)\r\n        this.u = 10; //delta value of changing t0 and t1 every dt\r\n        this.oldu = this.u; //old u\r\n        this.t0 = (new Date()).getTime(); //left visible border of the grafic\r\n        this.t1 = this.t0 + this.T; //right visible border of the grafic\r\n        this.animation = true; //animation trigger\r\n        this.needFrame = true; //is new frame needed\r\n        this.clasterBorder = 18; //maximum number of points before clasterisation\r\n        this.oldanimation = this.animation; //old animation trigger(need 4 keys control)\r\n        this.scrollSize = 400; //scroll size(how much milliseconds will be zoomed in 1 wheel step)\r\n        this.keyStep = 30; //default key step(how much milliseconds will be scrolled in 1 keyhold step)\r\n        this.grafOver = false; //is mouse over graf canvas\r\n        this.grafMouseX0 = 0; //mouse X over graf before\r\n        this.grafMouseX1 = 0; //mouse X over graf now\r\n        this.mouseDown = false; //is mouse down\r\n        this.uTimer = new _MyTimer__WEBPACK_IMPORTED_MODULE_0__.MyTimer({\r\n            func: this.dtuChanger.bind(this),\r\n            delay: this.dt\r\n        });\r\n        this.graph = this._container; //root el init\r\n        //this.leftCanvas = PlotterView.createElement('leftCanvas');//left canvas init\r\n        //size of main div\r\n        this.grafRootDivWidth = 1150;\r\n        this.grafRootDivHeight = 700;\r\n        // @ts-ignore\r\n        this.graf = PlotterView.createElement('canvas', this._container.id + '_' + 'graf'); //graf canvas create\r\n        //graf canvas local cords\r\n        this.gcordX = this.graf.width / 1000;\r\n        this.gcordY = this.graf.height / 1000;\r\n        // @ts-ignore\r\n        this.gctx = this.graf.getContext(\"2d\"); //graf brush init\r\n        // @ts-ignore\r\n        this.left = PlotterView.createElement('canvas', this._container.id + '_' + 'left'); //left canvas init\r\n        //left canvas local cords\r\n        this.lcordX = this.left.width / 1000;\r\n        this.lcordY = this.left.height / 1000;\r\n        // @ts-ignore\r\n        this.lctx = this.left.getContext(\"2d\"); //left brush init\r\n        // @ts-ignore\r\n        this.bottom = PlotterView.createElement('canvas', this._container.id + '_' + 'bottom'); //bottom canvas init\r\n        //bottom canvas local cords\r\n        this.bcordX = this.bottom.width / 1000;\r\n        this.bcordY = this.bottom.height / 1000;\r\n        // @ts-ignore\r\n        this.bctx = this.bottom.getContext(\"2d\"); //bottom brush init\r\n    }\r\n    //element creation\r\n    static createElement(tag, className) {\r\n        const element = document.createElement(tag);\r\n        if (className)\r\n            element.classList.add(className);\r\n        return element;\r\n    }\r\n    //element link geting\r\n    static getElement(selector) {\r\n        const element = document.getElementById(selector);\r\n        return element;\r\n    }\r\n    //right way to set T with recalculation of t0 t1\r\n    setT(newT) {\r\n        this.needFrame = true;\r\n        this.T = newT;\r\n        this.t1 = this.t0 + this.T;\r\n    }\r\n    //right way to set t0 with recalculation of t1 or T\r\n    sett0(newt0) {\r\n        this.needFrame = true;\r\n        this.t0 = newt0;\r\n        if (this.t1 > this.t0) {\r\n            this.T = this.t1 - this.t0;\r\n        }\r\n        else if (this.t1 < this.t0) {\r\n            this.t1 = this.t0 + this.T;\r\n        }\r\n    }\r\n    //right way to set t1 with recalculation of t0 or T\r\n    sett1(newt1) {\r\n        this.needFrame = true;\r\n        this.t1 = newt1;\r\n        if (this.t1 > this.t0) {\r\n            this.T = this.t1 - this.t0;\r\n        }\r\n        else if (this.t1 < this.t0) {\r\n            this.t0 = this.t1 - this.T;\r\n        }\r\n    }\r\n    //right way to set t0 and t1 with recalculation T\r\n    sett0t1(newt0, newt1) {\r\n        if (newt0 < newt1) {\r\n            this.needFrame = true;\r\n            this.t0 = newt0;\r\n            this.t1 = newt1;\r\n            this.T = newt1 - newt0;\r\n        }\r\n    }\r\n    //stop anim\r\n    stopAnim() {\r\n        this.animation = false;\r\n    }\r\n    //start anim\r\n    startAnim() {\r\n        this.animation = true;\r\n    }\r\n    //init(div and canvases create)\r\n    baseInit() {\r\n        this._container.style.width = this.grafRootDivWidth + 'px';\r\n        this._container.style.height = this.grafRootDivHeight + 'px';\r\n        this.graf.id = this._container.id + '_' + 'graf';\r\n        this.gcordX = this.graf.width / 300;\r\n        this.gcordY = this.graf.height / 300;\r\n        this.left.id = this._container.id + '_' + 'left';\r\n        this.lcordX = this.left.width / 300;\r\n        this.lcordY = this.left.height / 300;\r\n        this.bottom.id = this._container.id + '_' + 'bottom';\r\n        this.bcordX = this.bottom.width / 300;\r\n        this.bcordY = this.bottom.height / 300;\r\n        this._container.append(this.left, this.graf, this.bottom);\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + 'graf').width = this.grafRootDivWidth / 1.15;\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + 'graf').height = this.grafRootDivHeight / 1.4;\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + 'left').width = this.grafRootDivWidth / 7.67;\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + 'left').height = this.grafRootDivHeight / 1.4;\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + 'bottom').width = this.grafRootDivWidth / 1.15;\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + 'bottom').height = this.grafRootDivHeight / 3.5;\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + 'bottom').style.marginLeft = \"150px\";\r\n        this.bcordY = this.bcordY / 2.5;\r\n    }\r\n    //time adapt(transforms date milliseconds format to String visual format)\r\n    timeAdapt(milsecs) {\r\n        var hh = String(Math.floor(milsecs / 3600000));\r\n        var mm = String(Math.floor((milsecs - Number(hh) * 3600000) / 60000));\r\n        var ss = String(Math.floor((milsecs - Number(hh) * 3600000 - Number(mm) * 60000) / 1000));\r\n        hh = String((Number(hh) + 3) % 24);\r\n        if (String(hh).length == 1) {\r\n            hh = \"0\" + hh;\r\n        }\r\n        if (String(mm).length == 1) {\r\n            mm = \"0\" + mm;\r\n        }\r\n        if (String(ss).length == 1) {\r\n            ss = \"0\" + ss;\r\n        }\r\n        return \"[\" + hh + \":\" + mm + \":\" + ss + \"]\";\r\n    }\r\n    //x cord calculation(needs for x calculation of each point each iteration)\r\n    /*lxCount(p) {\r\n        return (this.model.points[i].date - this.t0) * 1000 * this.gcordX / (this.t1 - this.t0);\r\n    }*/\r\n    //draw(x and y basis lines draw)\r\n    basisDraw() {\r\n        this.gctx.beginPath();\r\n        this.gctx.strokeStyle = \"black\";\r\n        this.gctx.lineWidth = 3;\r\n        this.gctx.moveTo(0, 0);\r\n        this.gctx.lineTo(0, 1000 * this.gcordY);\r\n        this.gctx.lineTo(1000 * this.gcordX, 1000 * this.gcordY);\r\n        this.gctx.stroke();\r\n    }\r\n    //horisontal lines draw\r\n    xLinesDraw() {\r\n        this.gctx.beginPath();\r\n        this.gctx.strokeStyle = \"#C0C0C0\";\r\n        this.gctx.lineWidth = 1;\r\n        for (let i = 0; i < 10; i++) {\r\n            this.gctx.moveTo(0, i * 100 * this.gcordY);\r\n            this.gctx.lineTo(1000 * this.gcordX, i * 100 * this.gcordY);\r\n        }\r\n        this.gctx.stroke();\r\n    }\r\n    //vertical lines draw\r\n    yGridDraw() {\r\n        this.gctx.beginPath();\r\n        this.gctx.strokeStyle = \"#C0C0C0\";\r\n        this.gctx.lineWidth = 1;\r\n        var gridMilsec;\r\n        var gridX;\r\n        for (let i = 0; i < (this.t1 - this.t0) / this.gridStep + 2; i++) {\r\n            gridMilsec = Math.floor(this.t0 / this.gridStep) * this.gridStep + this.gridStep * i;\r\n            gridX = (gridMilsec - this.t0) * 1000 * this.gcordX / (this.t1 - this.t0);\r\n            this.gctx.moveTo(gridX, 0);\r\n            this.gctx.lineTo(gridX, 1000 * this.gcordY);\r\n        }\r\n        this.gctx.stroke();\r\n        this.bctx.beginPath();\r\n        this.bctx.strokeStyle = \"black\";\r\n        this.bctx.textAlign = \"center\";\r\n        this.bctx.lineWidth = 1;\r\n        this.bctx.font = \"10px Verdana\";\r\n        for (let i = 0; i < (this.t1 - this.t0) / this.gridStep + 2; i++) {\r\n            gridMilsec = Math.floor(this.t0 / this.gridStep) * this.gridStep + this.gridStep * i;\r\n            if (this.baseGridPoint == null) {\r\n                this.baseGridPoint = gridMilsec;\r\n            }\r\n            gridX = (gridMilsec - this.t0) * 1000 * this.gcordX / (this.t1 - this.t0);\r\n            let skipI = Math.floor((this.t1 - this.t0) / (this.gridStep * this.clasterBorder));\r\n            gridMilsec = Math.floor(this.t0 / this.gridStep) * this.gridStep + this.gridStep * i;\r\n            gridX = (gridMilsec - this.t0) * 1000 * this.gcordX / (this.t1 - this.t0);\r\n            if (skipI > 0) {\r\n                if (gridMilsec % ((skipI + 1) * this.gridStep) == this.baseGridPoint % ((skipI + 1) * this.gridStep)) {\r\n                    this.bctx.strokeText(this.timeAdapt(gridMilsec), gridX, 60 * this.bcordY);\r\n                    i += skipI;\r\n                }\r\n            }\r\n            else {\r\n                this.bctx.strokeText(this.timeAdapt(gridMilsec), gridX, 60 * this.bcordY);\r\n            }\r\n            this.bctx.stroke();\r\n        }\r\n        this.bctx.stroke();\r\n    }\r\n    //graf line draw\r\n    grafLineDraw() {\r\n        var i0 = 0;\r\n        var i1 = 0;\r\n        //console.log(this.model.points);\r\n        for (let i = 0; i < this.model.points.length - 1; i++) {\r\n            if ((this.t0 >= Number(this.model.points[i].date)) && (this.t0 <= Number(this.model.points[i + 1].date))) {\r\n                i0 = i;\r\n            }\r\n            if ((this.t1 >= Number(this.model.points[i].date)) && (this.t1 <= Number(this.model.points[i + 1].date))) {\r\n                i1 = i + 1;\r\n            }\r\n            else {\r\n                i1 = this.model.points.length - 1;\r\n            }\r\n        }\r\n        var lx0;\r\n        var lY0;\r\n        var lx1;\r\n        var lY1;\r\n        this.gctx.beginPath();\r\n        this.gctx.strokeStyle = \"black\";\r\n        this.gctx.lineWidth = 2;\r\n        this.gctx.font = \"15px Verdana\";\r\n        for (let i = i0; i < i1; i++) {\r\n            lx0 = (Number(this.model.points[i].date) - this.t0) * 1000 * this.gcordX / (this.t1 - this.t0);\r\n            lY0 = (1000 - 10 * this.model.points[i].value) * this.gcordY;\r\n            lx1 = (Number(this.model.points[i + 1].date) - this.t0) * 1000 * this.gcordX / (this.t1 - this.t0);\r\n            lY1 = (1000 - 10 * this.model.points[i + 1].value) * this.gcordY;\r\n            this.gctx.strokeText(\"[ \" + this.model.points[i].value + \" ]\", lx0, lY0);\r\n            this.gctx.moveTo(lx0, lY0);\r\n            this.gctx.lineTo(lx1, lY1);\r\n        }\r\n        this.gctx.stroke();\r\n    }\r\n    //left draw\r\n    leftGreyDraw() {\r\n        this.lctx.beginPath();\r\n        this.lctx.strokeStyle = \"black\";\r\n        this.lctx.lineWidth = 2;\r\n        this.lctx.font = \"15px Verdana\";\r\n        this.lctx.fillText(String(0), 135 * this.lcordX, 995 * this.lcordY);\r\n        for (let i = 1; i < 10; i++) {\r\n            this.lctx.fillText(String(100 * i), 129 * this.lcordX, (1000 - 100 * i) * this.lcordY);\r\n        }\r\n        this.lctx.fillText(String(100), 120.5 * this.lcordX, 23 * this.lcordY);\r\n        this.lctx.stroke();\r\n    }\r\n    //cleans the frame\r\n    cleanFrame() {\r\n        this.gctx.clearRect(0, 0, this.graf.width, this.graf.height);\r\n        this.bctx.clearRect(0, 0, this.bottom.width, this.bottom.height);\r\n    }\r\n    //checks is there a new point in the model since last frame\r\n    isNewPoint() {\r\n        if (this.model.points.length > 1) {\r\n            if ((this.oPointsLength < this.model.points.length) && (Number(this.model.points[this.model.points.length - 2].date) < this.t1)) {\r\n                this.oPointsLength = this.model.points.length;\r\n                this.needFrame = true;\r\n            }\r\n        }\r\n    }\r\n    //1 frame draw\r\n    frame() {\r\n        this.isNewPoint();\r\n        if (this.needFrame == true) {\r\n            //console.log(\"new frame\");\r\n            this.cleanFrame();\r\n            this.xLinesDraw();\r\n            this.yGridDraw();\r\n            //this.yLinesDraw();\r\n            this.grafLineDraw();\r\n            this.basisDraw();\r\n            //this.bottomDraw();\r\n            this.needFrame = false;\r\n        }\r\n        requestAnimationFrame(() => { this.frame(); });\r\n    }\r\n    //changer of t0 and t1 on u every dt milliseconds\r\n    dtuChanger() {\r\n        if ((this.animation == true) && (this.dt > 0)) {\r\n            this.needFrame = true;\r\n            this.t0 = this.t0 + this.u;\r\n            this.t1 = this.t1 + this.u;\r\n            this.uTimer.delay = this.dt;\r\n        }\r\n        else if (this.dt == 0) {\r\n            this.uTimer.delay = 10;\r\n        }\r\n    }\r\n    //left key press\r\n    leftKeyPress() {\r\n        this.needFrame = true;\r\n        this.t0 = this.t0 - this.u;\r\n        this.t1 = this.t1 - this.u;\r\n    }\r\n    //right key press\r\n    rightKeyPress() {\r\n        this.needFrame = true;\r\n        this.t0 = this.t0 + this.u;\r\n        this.t1 = this.t1 + this.u;\r\n    }\r\n    //keys control\r\n    controlInit() {\r\n        let _this = this;\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + \"graf\").addEventListener('mouseover', function (event) {\r\n            _this.grafOver = true;\r\n        });\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + \"graf\").addEventListener('mouseout', function (event) {\r\n            _this.grafOver = false;\r\n        });\r\n        document.addEventListener('keydown', function (event) {\r\n            if ((event.keyCode == 37) && (_this.leftPressed == false) && (_this.grafOver == true)) {\r\n                _this.needFrame = true;\r\n                _this.leftPressed = true;\r\n                _this.oldu = _this.u;\r\n                _this.u = -1 * _this.keyStep;\r\n                _this.oldanimation = _this.animation;\r\n                _this.animation = true;\r\n                _this.olddt = _this.dt;\r\n                _this.dt = 5;\r\n            }\r\n            if ((event.keyCode == 39) && (_this.rightPressed == false) && (_this.grafOver == true)) {\r\n                _this.needFrame = true;\r\n                _this.rightPressed = true;\r\n                _this.oldu = _this.u;\r\n                _this.u = _this.keyStep;\r\n                _this.oldanimation = _this.animation;\r\n                _this.animation = true;\r\n                _this.olddt = _this.dt;\r\n                _this.dt = 5;\r\n            }\r\n        });\r\n        document.addEventListener('keyup', function (event) {\r\n            if ((event.keyCode == 37) && (_this.leftPressed == true)) {\r\n                _this.needFrame = true;\r\n                _this.leftPressed = false;\r\n                _this.u = _this.oldu;\r\n                _this.animation = _this.oldanimation;\r\n                _this.dt = _this.olddt;\r\n            }\r\n            if ((event.keyCode == 39) && (_this.rightPressed == true)) {\r\n                _this.needFrame = true;\r\n                _this.rightPressed = false;\r\n                _this.u = _this.oldu;\r\n                _this.animation = _this.oldanimation;\r\n                _this.dt = _this.olddt;\r\n            }\r\n        });\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + \"graf\").addEventListener('wheel', (event) => {\r\n            event.preventDefault();\r\n            // @ts-ignore\r\n            let leftStep = _this.grafMouseX1 / document.getElementById(this._container.id + '_' + 'graf').width * _this.scrollSize;\r\n            // @ts-ignore\r\n            let rightStep = (document.getElementById(this._container.id + '_' + 'graf').width - _this.grafMouseX1) / document.getElementById(this._container.id + '_' + 'graf').width * _this.scrollSize;\r\n            ;\r\n            //see more\r\n            if (event.deltaY > 0) {\r\n                this.needFrame = true;\r\n                _this.t0 = _this.t0 - leftStep;\r\n                _this.t1 = _this.t1 + rightStep;\r\n            }\r\n            else if (event.deltaY < 0) {\r\n                this.needFrame = true;\r\n                _this.t0 = _this.t0 + leftStep;\r\n                _this.t1 = _this.t1 - rightStep;\r\n            }\r\n        });\r\n        // @ts-ignore\r\n        document.getElementById(this._container.id + '_' + \"graf\").addEventListener('mousemove', (event) => {\r\n            _this.grafMouseX0 = _this.grafMouseX1;\r\n            _this.grafMouseX1 = event.offsetX;\r\n            if (_this.mouseDown == true) {\r\n                this.needFrame = true;\r\n                // @ts-ignore\r\n                let deltaOffset = (_this.grafMouseX1 - _this.grafMouseX0) * (_this.t1 - _this.t0) / document.getElementById(this._container.id + '_' + 'graf').width;\r\n                _this.t0 = _this.t0 - deltaOffset;\r\n                _this.t1 = _this.t1 - deltaOffset;\r\n            }\r\n        });\r\n        document.addEventListener('mousedown', (event) => {\r\n            _this.mouseDown = true;\r\n        });\r\n        document.addEventListener('mouseup', (event) => {\r\n            _this.mouseDown = false;\r\n        });\r\n    }\r\n    //graf animation launcher\r\n    launcher() {\r\n        this.baseInit();\r\n        this.leftGreyDraw();\r\n        this.dtuChanger();\r\n        this.uTimer.launch();\r\n        this.frame();\r\n        this.controlInit();\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://ngraf/./src/PlotterView.ts?");

/***/ }),

/***/ "./src/WS.ts":
/*!*******************!*\
  !*** ./src/WS.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WS\": () => (/* binding */ WS)\n/* harmony export */ });\n/* harmony import */ var _MyPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MyPoint */ \"./src/MyPoint.ts\");\n/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Events */ \"./src/Events.ts\");\n\r\n\r\nclass WS {\r\n    constructor() {\r\n        this._wstTimeoutId = null; //wst timeout id\r\n        this._wst = 200; //websocket period\r\n        this.active = false; //is WS active\r\n        this.events = new _Events__WEBPACK_IMPORTED_MODULE_1__.Events();\r\n    }\r\n    //random int generator for graf testing\r\n    _getRandomInt(max) {\r\n        return Math.floor(Math.random() * max * 100) / 100;\r\n    }\r\n    //generate new point\r\n    _genPoint() {\r\n        return new _MyPoint__WEBPACK_IMPORTED_MODULE_0__.MyPoint({\r\n            date: new Date(),\r\n            value: this._getRandomInt(100)\r\n        });\r\n    }\r\n    //send point to model\r\n    _dispatchPoi() {\r\n        this.events.dispatch(\"receive\", this._genPoint());\r\n    }\r\n    //get websocket period\r\n    get wst() {\r\n        return this._wst;\r\n    }\r\n    //set websocket period\r\n    set wst(val) {\r\n        this._wst = val;\r\n        this.start();\r\n    }\r\n    //start ws\r\n    start() {\r\n        this.active = true;\r\n        clearInterval(this._wstTimeoutId);\r\n        this._wstTimeoutId = setInterval(() => {\r\n            this._dispatchPoi();\r\n        }, this.wst);\r\n    }\r\n    //stop ws\r\n    stop() {\r\n        this.active = false;\r\n        clearInterval(this._wstTimeoutId);\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://ngraf/./src/WS.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _PlotterModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlotterModel */ \"./src/PlotterModel.ts\");\n/* harmony import */ var _PlotterView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PlotterView */ \"./src/PlotterView.ts\");\n/* harmony import */ var _WS__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WS */ \"./src/WS.ts\");\n\r\n\r\n\r\nvar ws = new _WS__WEBPACK_IMPORTED_MODULE_2__.WS(); //model websocket\r\nws.start();\r\nconst plotterModel1 = new _PlotterModel__WEBPACK_IMPORTED_MODULE_0__.PlotterModel({\r\n    name: \"pl-1\",\r\n    socket: ws\r\n});\r\nconst plotterModel2 = new _PlotterModel__WEBPACK_IMPORTED_MODULE_0__.PlotterModel({\r\n    name: \"pl-2\",\r\n    socket: ws\r\n});\r\nconst plotterView1 = new _PlotterView__WEBPACK_IMPORTED_MODULE_1__.PlotterView({\r\n    container: 'root1',\r\n    model: plotterModel1\r\n});\r\nplotterView1.launcher();\r\nconst plotterView2 = new _PlotterView__WEBPACK_IMPORTED_MODULE_1__.PlotterView({\r\n    container: 'root2',\r\n    model: plotterModel2\r\n});\r\nplotterView2.launcher();\r\n\n\n//# sourceURL=webpack://ngraf/./src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;